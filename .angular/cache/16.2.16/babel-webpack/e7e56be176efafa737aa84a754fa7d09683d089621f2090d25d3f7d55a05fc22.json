{"ast":null,"code":"import { map } from 'rxjs';\nimport { baseUrlImage, environment } from 'src/environments/environment.development';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nlet ComicService = /*#__PURE__*/(() => {\n  class ComicService {\n    constructor(http) {\n      this.http = http;\n    }\n    // API với tham số phân trang\n    getAllComic(filterOn = '', filterQuery = '', pageNumber = 1, pageSize = 1000) {\n      let url = `${environment.apiBaseUrl}/api/comic?`;\n      // Thêm các tham số vào URL nếu có\n      if (filterOn) url += `filterOn=${filterOn}&`;\n      if (filterQuery) url += `filterQuery=${filterQuery}&`;\n      if (pageNumber) url += `pageNumber=${pageNumber}&`;\n      if (pageSize) url += `pageSize=${pageSize}&`;\n      // Cắt bỏ dấu \"&\" thừa ở cuối URL\n      url = url.slice(0, -1);\n      return this.http.get(url).pipe(map(response => {\n        const totalItems = response.totalItems; // Lấy totalItems từ response\n        const comics = response.comics; // Lấy danh sách comics\n        let totalPages = 0;\n        if (pageSize != null && pageSize != undefined) {\n          totalPages = Math.ceil(totalItems / pageSize); // Tính số trang\n        }\n        // Định dạng lại dữ liệu comic (ví dụ: xử lý thumbnail)\n        const formattedComics = comics.map(comic => ({\n          ...comic,\n          thumbnail: comic.thumbnail ? `${baseUrlImage.apiBaseUrl}/${comic.thumbnail}` : 'assets/default-image.jpg'\n        }));\n        // Trả về kết quả bao gồm comics, totalItems, totalPages\n        return {\n          comics: formattedComics,\n          totalItems: totalItems,\n          totalPages: totalPages\n        };\n      }));\n    }\n    getHighestRatingComic() {\n      return this.http.get(`${environment.apiBaseUrl}/api/comic/highest-rating`).pipe(map(comics => comics.map(comic => ({\n        ...comic,\n        thumbnail: comic.thumbnail ? `${baseUrlImage.apiBaseUrl}/${comic.thumbnail}` : 'assets/default-image.jpg'\n      }))));\n    }\n    getLastestComic() {\n      return this.http.get(`${environment.apiBaseUrl}/api/comic/latest`).pipe(map(comics => comics.map(comic => ({\n        ...comic,\n        thumbnail: comic.thumbnail ? `${baseUrlImage.apiBaseUrl}/${comic.thumbnail}` : 'assets/default-image.jpg'\n      }))));\n    }\n    getComicById(id) {\n      return this.http.get(`${environment.apiBaseUrl}/api/comic/${id}`).pipe(map(comic => ({\n        ...comic,\n        thumbnail: comic.thumbnail ? `${baseUrlImage.apiBaseUrl}/${comic.thumbnail}` : 'assets/default-image.jpg'\n      })));\n    }\n    getPageById(id) {\n      return this.http.get(`${environment.apiBaseUrl}/api/comic/page/${id}`).pipe(map(comics => comics.map(comic => ({\n        ...comic,\n        imageUrl: comic.imageUrl ? `${baseUrlImage.apiBaseUrl}/${comic.imageUrl}` : 'assets/default-image.jpg'\n      }))));\n    }\n    static {\n      this.ɵfac = function ComicService_Factory(t) {\n        return new (t || ComicService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: ComicService,\n        factory: ComicService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return ComicService;\n})();\nexport { ComicService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}